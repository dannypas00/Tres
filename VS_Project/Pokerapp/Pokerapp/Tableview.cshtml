@using WebMatrix.Data
@using System.Linq;
@{
    #region Get essential information
    Layout = "~/_Layout.cshtml";
    int roomCode = Request.QueryString["roomcode"].AsInt();
    int table = Request.QueryString["table"].AsInt();
    Page.Title = "Table" + table;
    string Url = "RulesPageNL/" + roomCode;
    string urlBack = "Players/" + roomCode;
    #endregion

    #region Database Connections
    Database db;
    string connectionString = @"Data Source=(LocalDB)\MSSQLLocalDB;AttachDbFilename=|DataDirectory|\Database.mdf;Integrated Security=True";
    string provider = "System.Data.SqlClient";
    db = Database.OpenConnectionString(connectionString, provider);

    //Get database tables
    dynamic player = db.Query("SELECT Name FROM Players WHERE Room_Code = @0 AND Tbl_nr = @1", roomCode, table);
    dynamic room = db.QuerySingle("SELECT * FROM Room WHERE Room_Code = @0", roomCode);
    dynamic blinds = db.Query("SELECT ValueSB, ValueBB FROM Blinds WHERE Room_Code = @0", roomCode);
    db.Close();
    #endregion

    #region Setting javascript variables
    TimeSpan startTime;
    if (room.Started_Time != null)
    {
        startTime = DateTime.Now - room.Started_Time;
    }
    else
    {
        startTime = TimeSpan.Zero;
    }
    TimeSpan pauseTime = room.Pause_Time;
    TimeSpan pauseDuration = room.Pause_Duration;
    TimeSpan blindTime = room.Blind_Time;
    TimeSpan totalRoundTimer = room.Round_Time;
    int hrs = startTime.Hours;
    int mns = startTime.Minutes;
    int scs = startTime.Seconds;
    int started = Convert.ToInt32(room.Started);
    int round = (int)Math.Ceiling(startTime.TotalSeconds / totalRoundTimer.TotalSeconds);
    int blindsIndex = (int)Math.Floor(startTime.TotalSeconds / blindTime.TotalSeconds);
    int small;
    int big;
    try     //Try catch RuntimeBinderException where blindsIndex.ValueSB or ValueBB is null.
    {
        small = blinds[blindsIndex].ValueSB;
        big = blinds[blindsIndex].ValueBB;
    }
    catch
    {
        small = blinds[blinds.Count - 1].ValueSB;
        big = blinds[blinds.Count - 1].ValueBB;
    }
    #endregion

    #region Get database dependent information
    int startvalue = room.Start_Value;
    int min_size = room.Tbl_Min_Size;
    int players = player.Count;
    int nameCount = player.Count;
    #endregion

    #region Reshuffle - Doesn't function yet as deletion hasn't been implemented yet
    if (min_size >= player.Count)
    {
        Shuffle shuffle = new Shuffle();
        shuffle.ShuffleTable(db, roomCode);
        Url = "Players.cshtml/" + roomCode;
        Response.Redirect("~/" + Url);
    }
    #endregion

    #region Distribute players among sides
    double nameDivision = nameCount / 2;
    int halfNamesCount = Convert.ToInt32(nameDivision);
    int firstHalfNamesCount = nameCount - halfNamesCount;
    int secondhalfnamesCount = firstHalfNamesCount - 1;
    if (nameCount % 2 == 0)
    {
        secondhalfnamesCount = firstHalfNamesCount;
    }
    #endregion
}
<div class="header">
    <div style="cursor:pointer; float:right; margin-top:40px;margin-right:70px" class="btn btn-primary clickableBtn" data-href="@Url">
        Rules
    </div>
    <div style="cursor:pointer; float:right; margin-top:40px;margin-right:10px" class="btn btn-primary clickableBtn" data-href="@urlBack">
        Back
    </div>
</div>

<div class="py-5">
    <!--Filling JS variables-->
    <div style="display: none;">
        <p id="Hours">@hrs</p>
        <p id="Minutes">@mns</p>
        <p id="Seconds">@scs</p>
        <p id="Time">@startTime.TotalSeconds</p>
        <p id="Blinds">@blindTime.TotalSeconds</p>
        <p id="Pause">@pauseTime.TotalSeconds</p>
        <p id="Started">@started</p>
        <p id="roomCode">@roomCode</p>
        <p id="table">@table</p>
        <p id="totalRoundTimer">@totalRoundTimer.TotalSeconds</p>
        <p id="PauseDuration">@pauseDuration.TotalSeconds</p>
    </div>
    <!--Start the page-->
    <div class="container">
        <div class="col-md-12 text-center">
            <h1>Table @table</h1>
        </div>
        <div class="row">
            <div class="col-md-2 text-center">
                @if (started == 0)
                {
                    <div name=timer class="timer">Game not running</div>
                }
                else
                {
                    <div name=timer class="timer">loading timer...</div>
                }
                <div name="timer" class="timer"></div>
                <div class="round">This is round: <span id="rnumber">@round</span></div>
            </div>
            <div class="col-md-8">
                <div class="gridd" id="activebody" style="text-align: center; max-height:500px; max-width:800px;">
                    <div class="white"></div>
                    <div class="white2"></div>
                    <div class="white3"></div>
                    <div class="white4"></div>
                    <div class="tabloo" style=" height:auto; width:auto">
                        <img src="~/assets/Tableview/Pokertable.png" style="height: 100%; width: 100%; object-fit: contain" />
                    </div>
                    <div class="gridRow1">
                        @{
                            db = Database.OpenConnectionString(connectionString, provider);
                            foreach (var a in db.Query("SELECT TOP (@2) Name FROM Players WHERE Room_Code = @0 AND Tbl_nr = @1 ORDER BY Name DESC", roomCode, table, secondhalfnamesCount))
                            {
                                <div class="chair" style="display: inline-block">
                                    <button id="pokerstool" value="@a.Name" name="player" type="button">@a.Name</button>
                                </div>
                            }
                            db.Close();
                        }
                    </div>
                    <div class="gridRow2">
                        @{
                            db = Database.OpenConnectionString(connectionString, provider);
                            foreach (var a in db.Query("SELECT TOP (@0) Name FROM Players WHERE Room_Code = @1 AND Tbl_nr = @2 ORDER BY Name ASC", firstHalfNamesCount, roomCode, table))
                            {
                                <div class="chair">
                                    <button id="pokerstool" value="@a.Name" name="player" type="button">@a.Name</button>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
            <div class="col-md-2">
                <p>Starting capital: @startvalue</p>
                <p>Small blind: <span id="SB">@small</span></p>
                <p>Big blind: <span id="BB">@big</span></p>
            </div>
        </div>
    </div>
</div>

<!--Popup modals-->
<div class="pauseModal modal fade show in" data-target="#myModal" data-toggle="modal" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog">
        <div class="v-cell">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Game Paused</h4>
                </div>
                <div class="modal-body">
                    Game paused for <b id="pausedDuration">@pauseDuration</b>. q
                </div>
            </div>
        </div>
    </div>
</div>
<div class="roundModal modal fade show in" data-target="#myModal" data-toggle="modal" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog">
        <div class="v-cell">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">The round is over</h4>
                </div>
                <div class="modal-body">
                    A new round will now start
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.3.1.js"
        integrity="sha256-2Kok7MbOyxpgUVvAk/HJ2jigOSYS2auK4Pfzbm7uH60="
        crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-modal/0.9.1/jquery.modal.min.js"></script>
<script>
    var roomcode = $("#roomCode").html();
    var currentHours = $('#Hours').html();
    var currentMinutes = $('#Minutes').html();
    var currentSeconds = $('#Seconds').html();
    var blind = $('#Blinds').html();
    var pauseTime = $('#Pause').html();
    var pauseDuration = $('#PauseDuration').html()
    var totalRoundTimer = $('#totalRoundTimer').html();
    var round = $('#rnumber').html();   

    //Increment timer
    setInterval(function () {
        $.ajax({    //Ajax call to check for a paused game
            url: "Ajax/PauseAjax.cshtml",
            type: "get",
            data: {
                roomCode: roomcode
            },
            success: function (response) {
                if (response === "1") { //If the game isn't paused, run the timer
                    var totalSecs = currentSeconds + (currentMinutes * 60) + (currentHours * 3600);
                    var displayHours = currentHours;
                    var displayMinutes = currentMinutes;
                    var displaySeconds = currentSeconds;

                    if (currentHours.toString().length < 2) {
                        displayHours = "0" + currentHours;
                    }

                    if (currentMinutes.toString().length < 2) {
                        displayMinutes = "0" + currentMinutes;
                    }

                    if (currentSeconds.toString().length < 2) {
                        displaySeconds = "0" + currentSeconds;
                    }

                    if (totalSecs % blind === 0) {
                        if (totalSecs != 0) {
                            $.ajax({    //Ajax call to raise the blinds
                                url: "Ajax/BlindTimer.cshtml",
                                type: "get",
                                data: {
                                    roomCode: roomcode,
                                    blind: blind,
                                    totalSecs: totalSecs
                                },
                                success: function (response) {
                                    response = response.split("-");
                                    document.querySelector('#SB').innerHTML = response[1];
                                    document.querySelector('#BB').innerHTML = response[2];
                                }
                            })
                        }
                    }
                    //Calculate whether to up the round
                    if (totalSecs % totalRoundTimer === 0) {
                        if (totalSecs != 0) {
                            round++;
                            $('.roundModal').modal('show');
                            currentSeconds++;
                            setTimeout(function () {
                                $('.roundModal').modal('hide');
                            }, 2000);
                        }
                    }
                    //Calculate whether to pause yet
                    if (totalSecs % pauseTime === 0) {
                        if (totalSecs != 0) {
                        @{ 
                                db = Database.OpenConnectionString(connectionString, provider);
                                db.Execute("UPDATE Room SET Started = 0");
                                db.Close();
                        }
                        $('.pauseModal').modal('show');
                        setTimeout(function () {
                            @{ 
                                db = Database.OpenConnectionString(connectionString, provider);
                                db.Execute("UPDATE Room SET Started = 1");
                                db.Close();
                            }
                            $('.pauseModal').modal('hide');
                        }, 1000 * pauseDuration);
                        }
                    }

                    currentSeconds++;

                    if (currentSeconds === 60) {
                        currentMinutes++;
                        currentSeconds = 0;
                    }

                    if (currentMinutes === 60) {
                        currentHours++;
                        currentMinutes = 0;
                    }

                    //Update Page
                    document.querySelector('.timer').innerHTML = "Game Time: " + displayHours + ":" + displayMinutes + ":" + displaySeconds;
                    document.querySelector('#rnumber').innerHTML = round;
                }
                else {
                    document.querySelector('.timer').innerHTML = "The game is currently not running";
                }
            }
        })
    }, 1000);
</script>
<script>
    jQuery(document).ready(function ($) {
        $(".clickable").click(function () {
            window.location = $(this).find("a:first").attr("href");
        });
    });
    jQuery(document).ready(function ($) {
        $(".clickableBtn").click(function () {
            window.location = $(this).data("href");
        });
    });
</script>
